[
  {
    "content": "Core architecture - Model Context Protocol Model Context Protocol home page Search... Python SDK TypeScript SDK Java SDK Kotlin SDK Specification Get Started Introduction Quickstart Example Servers Example Clients Tutorials Building MCP with LLMs Debugging Inspector Concepts Core architecture Resources Prompts Tools Sampling Roots Transports Development What's New Roadmap Contributing Model Context Protocol home page Search... Search...",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 0,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  },
  {
    "content": "del Context Protocol home page Search... Search... Navigation Concepts Core architecture Documentation SDKs Documentation SDKs GitHub The Model Context Protocol (MCP) is built on a flexible, extensible architecture that enables seamless communication between LLM applications and integrations. This document covers the core architectural components and concepts.",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 1,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  },
  {
    "content": "rs the core architectural components and concepts. ​ Overview MCP follows a client-server architecture where: Hosts are LLM applications (like Claude Desktop or IDEs) that initiate connections Clients maintain 1:1 connections with servers, inside the host application Servers provide context, tools, and prompts to clients ​ Core components ​ Protocol layer The protocol layer handles message framing, request/response linking, and high-level communication patterns.",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 2,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  },
  {
    "content": "se linking, and high-level communication patterns. TypeScript Python class Protocol < Request , Notification , Result > { // Handle incoming requests setRequestHandler < T > ( schema : T , handler : ( request : T , extra : RequestHandlerExtra ) => Promise < Result > ) : void // Handle incoming notifications setNotificationHandler < T > ( schema : T , handler : ( notification : T ) => Promise < void > ) : void // Send requests and await responses request < T > ( request : Request , schema : T , o",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 3,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  },
  {
    "content": "request < T > ( request : Request , schema : T , options ? : RequestOptions ) : Promise < T > // Send one-way notifications notification ( notification : Notification ) : Promise < void > } Key classes include: Protocol Client Server ​ Transport layer The transport layer handles the actual communication between clients and servers.",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 4,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  },
  {
    "content": "actual communication between clients and servers. MCP supports multiple transport mechanisms: Stdio transport Uses standard input/output for communication Ideal for local processes HTTP with SSE transport Uses Server-Sent Events for server-to-client messages HTTP POST for client-to-server messages All transports use JSON-RPC 2.0 to exchange messages. See the specification for detailed information about the Model Context Protocol message format.",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 5,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  },
  {
    "content": "n about the Model Context Protocol message format. ​ Message types MCP has these main types of messages: Requests expect a response from the other side: interface Request { method : string ; params ? : { ... } ; } Results are successful responses to requests: interface Result { [ key : string ] : unknown ; } Errors indicate that a request failed: interface Error { code : number ; message : string ; data ?",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 6,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  },
  {
    "content": "Error { code : number ; message : string ; data ? : unknown ; } Notifications are one-way messages that don’t expect a response: interface Notification { method : string ; params ? : { ... } ; } ​ Connection lifecycle ​ 1. Initialization Client sends initialize request with protocol version and capabilities Server responds with its protocol version and capabilities Client sends initialized notification as acknowledgment Normal message exchange begins ​ 2.",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 7,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  },
  {
    "content": "acknowledgment Normal message exchange begins ​ 2. Message exchange After initialization, the following patterns are supported: Request-Response : Client or server sends requests, the other responds Notifications : Either party sends one-way messages ​ 3.",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 8,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  },
  {
    "content": "cations : Either party sends one-way messages ​ 3. Termination Either party can terminate the connection: Clean shutdown via close() Transport disconnection Error conditions ​ Error handling MCP defines these standard error codes: enum ErrorCode { // Standard JSON-RPC error codes ParseError = - 32700 , InvalidRequest = - 32600 , MethodNotFound = - 32601 , InvalidParams = - 32602 , InternalError = - 32603 } SDKs and applications can define their own error codes above -32000.",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 9,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  },
  {
    "content": "ons can define their own error codes above -32000. Errors are propagated through: Error responses to requests Error events on transports Protocol-level error handlers ​ Implementation example Here’s a basic example of implementing an MCP server: TypeScript Python import { Server } from \"@modelcontextprotocol/sdk/server/index.js\" ; import { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\" ; const server = new Server ( { name : \"example-server\" , version : \"1.0.0\" } , { capa",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 10,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  },
  {
    "content": ": \"example-server\" , version : \"1.0.0\" } , { capabilities : { resources : { } } } ) ; // Handle requests server . setRequestHandler ( ListResourcesRequestSchema , async ( ) => { return { resources : [ { uri : \"example://resource\" , name : \"Example Resource\" } ] } ; } ) ; // Connect transport const transport = new StdioServerTransport ( ) ; await server .",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 11,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  },
  {
    "content": "rt = new StdioServerTransport ( ) ; await server . connect ( transport ) ; ​ Best practices ​ Transport selection Local communication Use stdio transport for local processes Efficient for same-machine communication Simple process management Remote communication Use SSE for scenarios requiring HTTP compatibility Consider security implications including authentication and authorization ​ Message handling Request processing Validate inputs thoroughly Use type-safe schemas Handle errors gracefully I",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 12,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  },
  {
    "content": "y Use type-safe schemas Handle errors gracefully Implement timeouts Progress reporting Use progress tokens for long operations Report progress incrementally Include total progress when known Error management Use appropriate error codes Include helpful error messages Clean up resources on errors ​ Security considerations Transport security Use TLS for remote connections Validate connection origins Implement authentication when needed Message validation Validate all incoming messages Sanitize inpu",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 13,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  },
  {
    "content": "ation Validate all incoming messages Sanitize inputs Check message size limits Verify JSON-RPC format Resource protection Implement access controls Validate resource paths Monitor resource usage Rate limit requests Error handling Don’t leak sensitive information Log security-relevant errors Implement proper cleanup Handle DoS scenarios ​ Debugging and monitoring Logging Log protocol events Track message flow Monitor performance Record errors Diagnostics Implement health checks Monitor connection",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 14,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  },
  {
    "content": "nostics Implement health checks Monitor connection state Track resource usage Profile performance Testing Test different transports Verify error handling Check edge cases Load test servers Was this page helpful? Yes No Inspector Resources On this page Overview Core components Protocol layer Transport layer Message types Connection lifecycle 1. Initialization 2. Message exchange 3.",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 15,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  },
  {
    "content": "lifecycle 1. Initialization 2. Message exchange 3. Termination Error handling Implementation example Best practices Transport selection Message handling Security considerations Debugging and monitoring",
    "metadata": {
      "source": "https://modelcontextprotocol.io/docs/concepts/architecture",
      "title": "Core architecture - Model Context Protocol",
      "chunk_id": 16,
      "source_id": "modelcontextprotocol.io_1742822557",
      "timestamp": 1742822558.596234
    }
  }
]